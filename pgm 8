#include <iostream>
using namespace std;

class Queue {
private:
    int* arr;         // Array to store the elements of the queue
    int front;        // Index of the front element
    int rear;         // Index of the rear element
    int capacity;     // Maximum capacity of the queue
    int size;         // Current size of the queue

public:
    // Constructor to initialize the queue
    Queue(int capacity) {
        this->capacity = capacity;
        arr = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Destructor to clean up dynamically allocated memory
    ~Queue() {
        delete[] arr;
    }

    // Function to add an element to the queue (enqueue)
    void enqueue(int item) {
        if (size == capacity) {
            cout << "Queue is full. Cannot add item " << item << ".\n";
            return;
        }
        rear = (rear + 1) % capacity;  // Circular increment
        arr[rear] = item;
        size++;
        cout << "Item " << item << " added to the queue.\n";
    }

    // Function to remove an element from the queue (dequeue)
    int dequeue() {
        if (size == 0) {
            cout << "Queue is empty. Cannot dequeue.\n";
            return -1;  // Indicates empty queue
        }
        int item = arr[front];
        front = (front + 1) % capacity;  // Circular increment
        size--;
        return item;
    }

    // Function to get the front element of the queue
    int peek() {
        if (size == 0) {
            cout << "Queue is empty.\n";
            return -1;  // Indicates empty queue
        }
        return arr[front];
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Function to check if the queue is full
    bool isFull() {
        return size == capacity;
    }

    // Function to get the current size of the queue
    int getSize() {
        return size;
    }

    // Function to display the elements of the queue
    void display() {
        if (size == 0) {
            cout << "Queue is empty.\n";
            return;
        }

        cout << "Queue elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[(front + i) % capacity] << " ";
        }
        cout << endl;
    }
};

int main() {
    int capacity;
    cout << "Enter the capacity of the queue: ";
    cin >> capacity;

    Queue queue(capacity);

    // Menu-driven interface
    int choice, item;
    while (true) {
        cout << "\nQueue Operations:\n";
        cout << "1. Enqueue (Add item)\n";
        cout << "2. Dequeue (Remove item)\n";
        cout << "3. Peek (Front item)\n";
        cout << "4. Display queue\n";
        cout << "5. Check if queue is empty\n";
        cout << "6. Check if queue is full\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the item to add: ";
                cin >> item;
                queue.enqueue(item);
                break;
            case 2:
                item = queue.dequeue();
                if (item != -1) {
                    cout << "Dequeued item: " << item << endl;
                }
     
